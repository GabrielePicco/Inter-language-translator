## Natural Language Toolkit: sem3.fcfg
##
## Alternative simple grammar with transitive verbs and 
## quantifiers for the book. 
## 
## Author: Ewan Klein <ewan@inf.ed.ac.uk>
## URL: <http://nltk.sourceforge.net>
## For license information, see LICENSE.TXT


% start S
############################
# Grammar Rules
#############################

S[SEM = <?subj(?vp)>] -> NP[-PronEXP,NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp]
S[SEM = <?subj(?vp)>] -> NP[PronEXP=you,SEM=?subj] VP[NUM=pl,SEM=?vp]
S[SEM = <(?np(?pp))>] -> TIS[NUM=?n] NP[NUM=?n,SEM=?np] PP[PW=?w,SEM=?pp]
S[SEM = ?s] -> COMPL[SEM = ?s]

NP[-PronEXP,NUM=?n,SEM=<?det(?nom)> ] -> Det[NUM=?n,SEM=?det]  Nom[NUM=?n,SEM=?nom]
NP[-PronEXP,NUM=?n,SEM=<?pos(?nom)> ] -> PronPoss[NUM=?n,SEM=?pos]  Nom[NUM=?n,SEM=?nom]
NP[-PronEXP,NUM=?n,SEM=<?pos(?adj(?nom))> ] -> PronPoss[NUM=?n,SEM=?pos] ADJ[SEM=?adj]  Nom[NUM=?n,SEM=?nom]
NP[PronEXP=?p,LOC=?l,NUM=?n,SEM=?np] -> PropN[PronEXP=?p,LOC=?l,NUM=?n,SEM=?np]
NP[PronEXP=?p,NUM=?n,SEM=?np] -> PronPers[PronEXP=?p,NUM=?n,SEM=?np]
NP[-PronEXP,NUM=pl,SEM=<\Q.exists x.(?nom(x) & Q(x))>] -> Nom[NUM=pl,SEM=?nom]

Nom[NUM=?n,SEM=?nom] -> N[NUM=?n,SEM=?nom]

VP[NUM=?n,SEM=?v] -> IV[NUM=?n,SEM=?v]
VP[NUM=?n,SEM=<?v(?obj)>] -> TV[NUM=?n,SEM=?v] NP[SEM=?obj]

TV[NUM=?n,SEM=?g] -> AUX[NUM=?n] GERUND[SEM=?g]
IV[NUM=?n,SEM=?g] -> AUX[NUM=?n] IGERUND[SEM=?g]

IV[NUM=?n,SEM=<?cmp(?iv)>] -> IV[NUM=?n,SEM=?iv] COMPL[SEM=?cmp]

COMPL[SEM=<?adv(?ps(?advt))>] -> ADVT[SEM=?advt] PS[SEM=?ps] ADV[SEM=?adv]

PP[SEM=<?p(?np)>] -> P[PW=?w,SEM=?p] NP[SEM=?np]

TIS[num=?n] -> PART AUX[NUM=?n]


#############################
# Lexical Rules
#############################

PropN[-PronEXP,-LOC,NUM=sg,SEM=<\P.P(angus)>] -> 'Angus'
PropN[-PronEXP,-LOC,NUM=sg,SEM=<\P.P(cyril)>] -> 'Cyril'
PropN[-PronEXP,-LOC,NUM=sg,SEM=<\P.P(irene)>] -> 'Irene'

PronPers[PronEXP=you,NUM=sg,SEM=<\P.P(you)>] -> 'you'
PronPers[-PronEXP,NUM=sg,SEM=<\P.P(you)>] -> 'he'

Det[NUM=sg,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'every'
Det[NUM=pl,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'all'
Det[SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'some'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'a'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'an'

PronPoss[SEM=<\P Q.exists y.(P(y) & pronPoss(my,y) & onlyOne(y) & Q(y))>] -> 'my'
PronPoss[SEM=<\P Q.exists y.(P(y) & pronPoss(your,y) & onlyOne(y) & Q(y))>] -> 'your'

ADJ[SEM=<\P y.(P(y) & adj(big,y))>] -> 'big'

N[NUM=sg,SEM=<\x.objectRef(x,man,sg)>] -> 'man'
N[NUM=sg,SEM=<\x.objectRef(x,girl,sg)>] -> 'girl'
N[NUM=sg,SEM=<\x.objectRef(x,boy,sg)>] -> 'boy'
N[NUM=sg,SEM=<\x.objectRef(x,bone,sg)>] -> 'bone'
N[NUM=sg,SEM=<\x.objectRef(x,ankle,sg)>] -> 'ankle'
N[NUM=sg,SEM=<\x.objectRef(x,dog,sg)>] -> 'dog'
N[NUM=pl,SEM=<\x.objectRef(x,dog,pl)>] -> 'dogs'
N[NUM=sg,SEM=<\x.objectRef(x,thing,sg)>] -> 'thing'
N[NUM=pl,SEM=<\x.objectRef(x,thing,pl)>] -> 'things'
N[NUM=sg,SEM=<\x.objectRef(x,price,sg)>] -> 'price'
N[NUM=pl,SEM=<\x.objectRef(x,price,pl)>] -> 'prices'
N[NUM=sg,SEM=<\x.objectRef(x,head,sg)>] -> 'head'
N[NUM=sg,SEM=<\x.objectRef(x,opportunity,sg)>] -> 'opportunity'


TV[NUM=sg,SEM=<\X x.X(\y.(clauseT(x,chase,y) & verbTense(chase,pres)))>,TNS=pres] -> 'chases'
TV[NUM=pl,SEM=<\X x.X(\y.(clauseT(x,chase,y) & verbTense(chase,pres)))>,TNS=pres] -> 'chase'
TV[NUM=sg,SEM=<\X x.X(\y.(clauseT(x,imagine,y) & verbTense(imagine,pres)))>,TNS=pres] -> 'imagines'
TV[NUM=pl,SEM=<\X x.X(\y.(clauseT(x,imagine,y) & verbTense(imagine,pres)))>,TNS=pres] -> 'imagine'

PART -> 'there'

AUX[NUM=pl,SEM=<\x.x>] -> 'are'
AUX[NUM=sg,SEM=<\x.x>] -> 'is'

GERUND[SEM=<\X x.X(\y.(clauseT(x,imagine,y) & verbTense(imagine,progPres)))>,TNS=progPres] -> 'imagining'
GERUND[SEM=<\X x.X(\y.(clauseT(x,chase,y) & verbTense(chase,progPres)))>,TNS=progPres] -> 'chasing'
IGERUND[SEM=<\y.(clauseT(y,fly) & verbTense(fly,progPres))>,TNS=progPres] -> 'flying'

ADVT[SEM=<\p a P y.exist c.(P(c) & compl(c,out,p,a) & P(y))>] -> 'out'

PS[SEM=<\P.P(of)>] -> 'of'

ADV[SEM=<\P.P(here)>] -> 'here'

P[SEM=<\X x.X(\y.(propP(on,x,y)))>] -> 'on'